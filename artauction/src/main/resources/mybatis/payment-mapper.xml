<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <!-- (주의) 결제와 결제상세를 같은 곳에서 처리 -->
  <mapper namespace="payment">
  	
  	<!-- 등록 -->
	<select id="paymentSequence" resultType="int">
		select payment_seq.nextval from dual
	</select>  	
  	<select id="paymentDetailSequence" resultType="int">
  		select payment_detail_seq.nextval from dual
  	</select>
  	<insert id="paymentInsert">
  		insert into payment(
  			payment_no,payment_tid,payment_name,
			payment_total,payment_remain,member_id,deal_no
  		) values(
  			#{paymentNo},#{paymentTid},#{paymentName},
			#{paymentTotal},#{paymentRemain},#{memberId},#{dealNo}
  		)
  	</insert>
  	<insert id="paymentDetailInsert">
  		insert into payment_detail(
  			payment_detail_no, payment_detail_name,payment_detail_price,
			payment_detail_qty,payment_detail_item,payment_detail_origin,
			payment_detail_status
  		) values(
  			#{paymentDetailNo},#{paymentDetailName},#{paymentDetailPrice},
  			#{paymentDetailQty},#{paymentDetailItem},#{paymentDetailOrigin},
  			'승인'
  		)
  	</insert>
  	<select id="list" resultType="paymentDto">
  		select * from payment where member_id=#{memberId} order by payment_no desc
  	</select>
  	<select id="find" resultType="paymentDto">
  		select * from payment where payment_no = #{paymentNo} 
  	</select> 
  	<select id="findDetail" resultType="paymentDetailDto">
  		select * from payment_detail where payment_detail_origin = #{paymentNo} order by payment_detail_no asc
  	</select>
  	<!-- 
  		mybatis 에서 특정 목적에 맞는 데이터를 수동으로 조회
  		 -계층형 조회에서 많이 사용
  		 -resultMap을 이용해서 내가 직접 정의한 형태를 알려줘야 한다
  		 -mybatis 는 뎁스1까지만 자동매핑이 가능
  	 -->
  	 <!-- type 은 실제 자료형, id 는 매퍼 내에서 부를 별칭 -->
  	 <resultMap type="PaymentTotalVO" id="paymentTotalVO">
  	 	<!-- 필드가 객체라면 association 을 사용 -->
  	 	<association property="paymentDto">
  	 		<!-- result 의 column 은 DB의 컬럼명, property 는 클래스 필드명 -->
  	 		<result column="payment_no" property="paymentNo"/>
  	 		<result column="payment_name" property="paymentName"/>
  	 		<result column="payment_total" property="paymentTotal"/>
  	 		<result column="payment_tid" property="paymentTid"/>
  	 		<result column="payment_remain" property="paymentRemain"/>
  	 		<result column="payment_time" property="paymentTime" javaType="java.sql.Date"/>
  	 		<result column="member_id" property="memberId"/>
  	 	</association>
  	 	<!-- 필드가 컬렉션이라면 collection 을 사용
  	 	 - javaType : 자료형
  	 	 - ofType : 내부 데이터의 자료형
		 - select : 데이터를 채우기 위해 실행할 구문  	 	 
  	 	 -->
  	 	<collection property="paymentDetailList" 
  	 	javaType="java.util.List" ofType="PaymentDetailDto"
  	 	select="findDetail" column="payment_no" >
  	 		<result column="payment_detail_no" property="paymentDetailNo"/>
  	 		<result column="payment_detail_name" property="paymentDetailName"/>
  	 		<result column="payment_detail_price" property="paymentDetailPrice"/>
  	 		<result column="payment_detail_qty" property="paymentDetailQty"/>
  	 		<result column="payment_detail_item" property="paymentDetailItem"/>
  	 		<result column="payment_detail_origin" property="paymentDetailOrigin"/>
  	 		<result column="payment_detail_status" property="paymentDetailStatus"/>
  	 	</collection>
  	 </resultMap>
  	 <!-- 내가 만든 resultMap 을 이용해서 조회하고 싶다면 select 에 resultMap 을 작성 -->
  	 <select id="findTotal" resultMap="paymentTotalVO">
  	 	select * from payment where member_id=#{memberId} order by payment_no desc
  	 </select>
  	 <!-- 결제 전체/부분 취소 -->
  	 <!-- 해당 결제 건 전체를 취소한다는건 대표 정보 및 상세정보를 수정한다는 뜻 -->
  	 <update id="cancelAll">
  	 	update payment set payment_remain = 0 where payment_no=#{paymentNo}
  	 </update>
  	 <update id="cancelAllItem">
  	 	update payment_detail set payment_detail_status = '취소' where payment_detail_origin=#{paymentNo}
  	 </update>
  	 
  	 <!-- 결제 상세 항목 한개를 취소하더라도 전체 정보의 잔여 금액을 차단해야 함 -->
  	 <update id="cancelItem">
  	 	update payment_detail set payment_detail_status ='취소' where payment_detail_no =#{paymentDetailNo}
  	 </update>
	 <update id="decreaseItemRemain">
	 	update payment set payment_remain = payment_remain - #{money} where payment_no = #{paymentNo}
	 </update>
	 
	 <select id="selectDetailOne" resultType="paymentDetailDto">
	 	select * from payment_detail where payment_detail_no=#{paymentDetailNo}
	 </select>
	 	<select id="rankList" resultType="PaymentMemberVO">
    SELECT *
    FROM (
        SELECT pd.payment_detail_no, pd.payment_detail_name, pd.payment_detail_price, p.member_id
        FROM payment_detail pd
        JOIN payment p ON pd.payment_detail_origin = p.payment_no
        ORDER BY pd.payment_detail_price DESC
    )
    WHERE ROWNUM
    <![CDATA[
     <= 10
     ]]>
	</select>
  </mapper>